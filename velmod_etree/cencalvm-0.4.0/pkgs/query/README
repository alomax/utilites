// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// <LicenseText>
//
// ----------------------------------------------------------------------
//

/**
 * @file pkgs/query/README
 * 
 * @brief Interface for querying USGS central CA velocity model.
 *
 * This directory tree contains the routines for querying the USGS
 * central CA velocity model along with some examples.
 *
 * @section dirs Directories
 *
 * @li \b apps Applications for help in querying models.
 * @li \b examples Examples of how to use the query routines.
 * @li \b lib Source code for C++ query routines.
 * @li \b liblang Source code for C and Fortran bindings of C++ query
 * routines.
 * @li \b tests Unit testing routines for C++ query routines.
 *
 * @section Database
 *
 * See cencalvm::storage::PayloadStruct for a list of the data (and the order
 * in which it is returned by default).
 *
 * @subsection Units
 *
 * SI units are used in the database and its interface. See the
 * documentation of the query routines for specific units of the
 * arguments to each routine.
 *
 * @section extendedmodel Enabling use of the extended (regional) model
 *
 * Use of the extended model is disabled by default. To enable use of
 * the extended model in queries simply set the filename of the
 * extended model using cencalvm::query::VMQuery::filenameExt() in
 * C++, cencalvm_filenameExt() in C, or cencalvm_filenameext_f() in
 * Fortran. You can also change the size of the cache used in queries
 * of the extended model using
 * cencalvm::query::VMQuery::cacheSizeExt() in C++,
 * cencalvm_cacheSizeExt() in C, or cencalvm_cachesizeext_f() in
 * Fortran.
 *
 * @section Applications
 *
 * @subsection cencalvminfo
 *
 * This application dumps the metadata, database schema, and number of
 * octants in an etree database to stdout.
 *
 * @section Examples
 *
 * The data directory contains sample input and output for the
 * examples. The output can be compared to that generated on your
 * machine to make sure the example ran properly.
 *
 * The cpp, c, and f77 directories contain the examples of how to
 * query the database from C++, C, and Fortran, respectively. See
 * \link pkgs/query/examples/README pkgs/query/examples/README
 * \endlink for more information.
 *
 * @section Querying routines
 *
 * Documentation for the query routines for each language are
 * contained in the header files. Pay special attention to the default
 * query parameters.
 *
 * @subsection queryTypes Query types
 *
 * The etree database is a fully populated etree, meaning data is
 * stored at the leaves of the tree as well as in the interior. The
 * different levels in the etree correspond to different spatial
 * resolutions. The lower an octant is in the etree, the smaller the
 * spatial volume associated with the octant.  In other words, values
 * at the different levels of the etree correspond to material
 * properties at different spatial resolutions, for example the P wave
 * speed on a scale of 25 meters versus the P wave speed on a scale of
 * 400 meters. The values at the interior octants at each level are
 * the arithmetic means of the values of its children. 
 *
 * @note Because averaging fault block and zone values is not
 * meaningful, the fault block and zone values are set to -999 in the
 * interior octants.
 *
 * @note In the database, the value for Vs in water is -999. In order
 * to prevent nonphysical values for solid material near the
 * solid/water interface, mixing of solid and water material
 * properties is not permitted and solid material properties take
 * precedence. In other words, if an interior octant has both children
 * with water properties and children wich solid material properties,
 * the solid material properties will be averaged and the water
 * properties will be ignored.
 *
 * @subsubsection setQueryType Setting the query type
 * 
 * The query routine assigns values from the Etree database for a
 * given location depending on the query type.
 *
 * @note Resolution in the discussion that follows refers to the
 * vertical resolution which is finer than the horizontal
 * resolution.
 *
 * @subsubsection maxres MAXRES query
 *
 * When the query type is set to MAXRES, then the query routines
 * will use values at the maximum resolution available. The query
 * values will be set to -999.0 if the etree was not populated with
 * data at that location even if averaged values are available; this
 * happens when one queries at locations above topography or the water
 * surface. If you want averaged values, use one of the other query
 * types.
 *
 * @subsubsection fixedres FIXEDRES query
 *
 * When the query type is set to FIXEDRES, values at the requested
 * resolution will be used even if the database contains values at a
 * higher resolution. This prevents aliasing the model for queries at
 * a uniform spatial resolution. The requested resolution is set with
 * cencalvm::query::VMQuery::queryRes() in C++, cencalvm_queryRes() in
 * C, and cencalvm_queryres_f() in Fortran.
 *
 * @subsubsection waveres WAVERES query
 *
 * When the query type is set to WAVERES, the requested resolution is
 * the wavelength for shear waves at a given minimum period. The query
 * routine first finds the maximum resolution available and traverses
 * up the tree until the resolution is no greater than the requested
 * resolution. This prevents aliasing the model for queries at
 * variable spatial resolution but uniform resolution with respect to
 * the wavelength of shear waves at a given period. The requested
 * resolution is set by passing the minimum period as an argument to
 * cencalvm::query::VMQuery::queryRes() in C++, cencalvm_queryRes() in
 * C, and cencalvm_queryres_f() in Fortran.
 *
 * @subsection f77notes Fortran 77 notes
 *
 * @li \b cencalvm_createquery_f()
 *
 * The argument to cencalvm_createquery_f() is used to store the
 * address of the handle to the underlying C++ object. It is
 * ABSOLUTELY CRITICAL that the number of bytes associated with this
 * variable match the size of a C/C++ pointer on the system where the
 * routines are compiled. On 32-bit and 64-bit systems, the variables
 * will generally be a 4 byte integer (integer*4) and an 8 byte
 * integer (integer*8), respectively.
 *
 * @li No Fortran 77 binding for cencalvm_queryVals()
 *
 * Because arrays of strings cannot be passed from Fortran to C++ in a
 * standard manner, there is no Fortran 77 binding for
 * cencalvm_queryVals(). Instead, you must accept the default behavior
 * in which all values are returned.
 *
 */

// version
// $Id: README,v 1.11 2005/11/05 18:55:25 brad Exp $

// End of file 
